ELEVATOR CONTROL SYSTEM



Overview:

- Elevators are represented by an elevator class
- Passengers are represented by a passenger class
- The control system contains a list of all elevators
- An elevator contains a list of all its passengers and where it needs to go to drop off/pick up passengers



Four main classes:

1. Elevator Control System

- Has a reference to all the elevators in the system via an ArrayList
- Uses a hashmap to keep track of all the requests
- Allows the retrieval of an elevator
- Has a method that allows updating of an elevator's attributes
- Given a pickup request, schedules a pickup for an elevator in the system that has enough room for all passengers in the request
- Enables stepping through a simulation of the control system (Given more time, I would definitely modularize this method better and make it less messy)

2. Elevator

- Has getters and setters for accessing and modifying the attributes of an elevator
- Stores all scheduled dropoffs in two separate lists, one containing all dropoffs above the current floor (goalsAbove) and one containing all dropoffs below the current floor (goalsBelow)
- goalsAbove is sorted in increasing order, which is the order you would visit those floors if you were in an elevator going upwards
- Similarly, goalsBelow is sorted in decreasing order
- This class contains an addFloor method that takes a dropoff destination and inserts it into the correct position in the correct dropoff list to maintain the right order

3. Passenger

- Contains information about which floor a passenger is getting off at

4. Request

- Contains information about the passengers making the request
- Has a reference to the elevator fulfilling the request


Scheduling:

Given a pickup request, we always first check if there is an elevator with room on the floor for which the request is being made. If so, that elevator should handle the request. If not, we find the closest elevator with room that is either going in the same direction as the request or immobile. That elevator will handle the request. We will store the pickup request in a HashMap data structure until the handling elevator arrives at the floor, at which time we will load the elevator with the passengers in the request and remove the request from the HashMap.



Additional Considerations:

If I have more time, I would implement some more comprehensive features. For example, all elevators have emergency alarms. If it goes off, the elevator should stop and let people out. If there's no emergency, the requests of everyone who just got off should be re-entered with the pickup method. If there is a serious emergency like a fire, all elevators should stop at their closest floor and let everyone out.

Modularization can definitely be improved, as well as a design clarity since the pickUp() and step() methods are a little messy.

Some elevators might be undergoing maintenance, in which case the elevator should not respond to requests from regular users.

In the real world, we wouldn't have access to the number of passengers, so I would enforce capacity by implementing a weight cap that the total weight of all passengers cannot surpass.



Some Extra Notes:

I use ArrayLists pretty liberally in this system. Efficiency can probably improved by using another data structure with better lookup/insertion/deletion speeds, such as a HashMap, but since the maximum number of elevators is only 16 and the maximum number of passengers in an elevator is probably no more than 20, I felt that using an ArrayList to store elevator/passenger is fine efficiency-wise.


